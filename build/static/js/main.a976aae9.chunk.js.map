{"version":3,"sources":["GiphyFetch.tsx","SearchInterface.tsx","index.tsx"],"names":["GiphyFetch","props","searchTerm","searchType","offsetRef","React","useRef","limRef","useState","giphyData","setGiphyData","newSession","startNewSession","loading","setLoading","errors","setErrors","totalCount","setTotalCount","count","setCount","currentOffset","setOffset","searchParams","URLSearchParams","api_key","q","limit","toString","offset","Math","floor","random","serviceRequest","type","a","fetch","method","response","json","data","meta","status","pagination","total_count","push","msg","length","console","log","useEffect","map","error","Alert","severity","style","padding","margin","TextField","InputProps","inputProps","min","max","helperText","inputRef","defaultValue","Button","onClick","current","value","backgroundColor","color","fullWidth","Divider","Skeleton","animation","item","index","key","target","href","url","src","images","fixed_height_downsampled","height","alt","SearchInterface","setSearchTerm","fetching","setFetching","setSearchType","textRef","updateSearchTerm","label","variant","onChange","onKeyPress","event","types","marginTop","width","App","className","mountNode","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.a976aae9.chunk.js","sourcesContent":["import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Alert from '@material-ui/lab/Alert';\nimport { Button, Divider, TextField } from '@material-ui/core';\n\ninterface GiphyFetchProps {\n  searchTerm: any;\n  searchType: string;\n}\nconst GiphyFetch: React.FC<GiphyFetchProps> = (props) => {\n  const {searchTerm, searchType} = props;\n  \n  const offsetRef = React.useRef<any>(null);\n  const limRef = React.useRef<any>(null);\n\n  const [giphyData, setGiphyData] = React.useState<any[]>([]);\n  const [newSession, startNewSession] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [errors, setErrors] = React.useState<any[]>([]);\n\n  const [totalCount, setTotalCount] = React.useState(0);\n  const [count, setCount] = React.useState(0);\n  const [currentOffset, setOffset] = React.useState(null);\n\n  const handleStartNewSession = () => { startNewSession(!newSession) };\n  const handleSetLimit = () => { setCount(limRef?.current?.value) };\n  const handleSetOffset = () => { setOffset(offsetRef?.current?.value) };\n  const clearOffset = () => { setOffset(null) };\n\n  const searchParams = new URLSearchParams({\n    api_key: \"p56JOFtV16X5lGBOZEAPQ0iPeo04w1Le\",\n    q: `${searchTerm}`,\n    limit: `${count ? count.toString() : '20'}`,\n    offset: currentOffset || Math.floor(Math.random()*1000).toString(),\n  });\n\n  const serviceRequest = async (type: string) => {\n    try{\n      setLoading(true);\n      let response = await fetch(`https://api.giphy.com/v1/${type}/search?${searchParams}`, {method: 'GET'});\n      let data = await response.json();\n      \n      let errors = [];\n      if(data?.meta?.status === 200) {\n        if(data.pagination.count > 0) {\n          setLoading(false);\n          setTotalCount(data.pagination.total_count);\n          setCount(data.pagination.count);\n          setOffset(data.pagination.offset);\n          setGiphyData(data.data);\n        } else {\n          errors.push('Result not found!');\n        }\n      } else { \n        errors.push(data?.meta?.msg);\n      }\n      setErrors(errors);\n      (errors.length > 0) && console.log(errors);\n    }\n    catch(err) {\n      console.log(err);\n    };\n  };\n\n  React.useEffect(() => {\n    serviceRequest(searchType);\n  }, [newSession]);\n\n  return(\n    <div>\n      {\n        errors.length > 0 && errors.map((error) => <Alert severity=\"error\" style={{ padding: '2vh', margin: '3vh 0' }}>{error}</Alert>)\n      }\n\n      {giphyData.length > 0 && <>\n        <h2>Result (<span>{totalCount} {searchType}</span>)</h2>\n        <h3>\n          <p>Limit: {count} results</p>\n          <p>\n            Set new limit:\n            <TextField type=\"number\"     \n              InputProps={{ inputProps: { min: 1, max: 25 } }}\n              helperText=\"Hint: 1 - 25\" \n              inputRef={limRef} defaultValue={count}/>\n            <Button onClick={handleSetLimit}>Update limit</Button>\n          </p>\n          <p>Current offset: {currentOffset}</p>\n          <p>\n            Set new offset: \n            <TextField type=\"number\"\n              inputRef={offsetRef}\n              InputProps={{ inputProps: { min: 0, max: totalCount-1 } }} />\n            <Button onClick={handleSetOffset}>Update offset</Button>\n          </p>\n        </h3>\n        <Button style={{ backgroundColor: 'rgba(0,0,0,0.1)', color: 'white' }} fullWidth onClick={clearOffset}>Clear current offset</Button>\n        <Button style={{ backgroundColor: 'rgba(0,0,0,0.5)', color: 'white' }} fullWidth onClick={handleStartNewSession}>Refresh</Button>\n\n\n        <Divider style={{ margin: '5vh' }} />\n        {\n          !loading\n          ?(\n            <div>\n              {giphyData && giphyData.map((item, index) => (\n                <span key={index}>\n                  <a target=\"_blank\" href={item?.url}><img src={item?.images?.fixed_height_downsampled?.url} height=\"200px\" alt={`${index}`} /></a>\n                </span>\n              ))}\n            </div>\n          )\n          :(\n            <div>\n              <Skeleton />\n              <Skeleton animation={false} />\n              <Skeleton animation=\"wave\" />\n            </div>\n          )\n        }\n      </>}\n \n    </div>\n  );\n};\n\nexport default GiphyFetch;","import React from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport GiphyFetch from './GiphyFetch';\nimport \"./styles.css\";\n\nconst SearchInterface: React.FC = () => {\n  const [searchTerm, setSearchTerm] = React.useState(null);\n  const [fetching, setFetching] = React.useState(false);\n  const [searchType, setSearchType] = React.useState<string>('');\n\n  const textRef = React.useRef<any>(null);\n\n  const updateSearchTerm = () => {\n    setFetching(true);\n    setSearchTerm(textRef?.current?.value);\n  };\n  const searchGifs = () => { \n    setSearchType('gifs');\n    updateSearchTerm(); \n  };\n  const searchStickers = () => {\n    setSearchType('stickers');\n    updateSearchTerm();\n  };\n  \n  const closeFetchingSession = () => {\n    setFetching(false);\n  };\n\n  const onKeyPress = (event: any) => {\n    const types = ['gifs', 'stickers'];\n    const random = Math.floor(Math.random() * types.length);\n    if (event.key === 'Enter') {\n      setSearchType(types[random]);\n      updateSearchTerm();\n    }\n  };\n  return (\n    <div>\n      <div>\n        <div>\n          <TextField\n            type=\"text\" \n            label=\"What are you looking for?\"\n            fullWidth\n            variant=\"filled\"\n            inputRef={textRef}\n            onChange={closeFetchingSession}\n            onKeyPress={onKeyPress}\n          />\n        </div>\n        <div style={{ marginTop: '2vh' }}>\n          <Button\n            style={{width: '50%', padding: '2vh', backgroundColor: `${searchType === 'gifs' ? 'rgba(255, 204, 0, 1)' : 'rgba(255,255,255,0.5)'}`}} \n            onClick={searchGifs}\n          >\n            Search GIFs\n          </Button>\n          <Button\n            style={{width: '50%', padding: '2vh', backgroundColor: `${searchType === 'stickers' ? 'rgba(255, 204, 0, 1)' : 'rgba(255,255,255,0.5)'}`}}\n            onClick={searchStickers}\n          >\n            Search Stickers\n          </Button> \n        </div>\n      </div>\n      {\n        fetching && <GiphyFetch searchTerm={searchTerm} searchType={searchType} />\n      }\n    </div>\n  );\n};\n\nexport default SearchInterface;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport SearchInterface from \"./SearchInterface\";\nimport GiphyFetch from \"./GiphyFetch\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"giphy-body\">\n      <h1>Finding GIPHY!</h1>\n      <SearchInterface />\n    </div>\n  );\n}\n\nvar mountNode = document.getElementById(\"app\");\nReactDOM.render(<App />, mountNode);"],"sourceRoot":""}